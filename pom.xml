<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.malbi.sync.web</groupId>
  <artifactId>sku-web-sync</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>sku-web-sync</name>
  
	<properties>
  		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  		<mojarra-version>2.2.12</mojarra-version>
		<glassfish.version>4.1.1</glassfish.version>
		<org.jboss.arquillian.version>1.1.10.Final</org.jboss.arquillian.version>
	</properties>
  
<repositories>
<!--  Necessary for Oracle JDBC library -->
	<repository>
    	<id>codelds</id>
    	<url>https://code.lds.org/nexus/content/groups/main-repo</url>
    </repository>

    <!-- https://kenai.com/projects/javaee-patterns/sources/hg/content/TestingEJBAndCDI/pom.xml?rev=227 -->
    <repository>
		<id>jboss-public-repository-group</id>
		<name>JBoss Public Maven Repository Group</name>
		<url>https://repository.jboss.org/nexus/content/groups/public/</url>
		<layout>default</layout>
		<releases>
			<enabled>true</enabled>
			<updatePolicy>never</updatePolicy>
		</releases>
		<snapshots>
			<enabled>true</enabled>
			<updatePolicy>never</updatePolicy>
		</snapshots>
	</repository>
	
</repositories>
 
  <url>http://maven.apache.org</url>
  
  
<dependencies>
 <!-- We do not need this driver as we use Glassfish datasource.
 But for Crago maven plugin it's necessary to specify library. 
 
  -->
	<dependency>
  		<groupId>com.oracle</groupId> 
  		<artifactId>ojdbc6</artifactId> 
  		<version>11.2.0.3</version> 
  	</dependency>
  	<dependency>
		<groupId>com.h2database</groupId>
		<artifactId>h2</artifactId>
		<version>1.4.192</version>
	</dependency>
	
	<!-- JSF implementation: Mojarra org.glassfish - is the one at org.glassfish and it is working! -->
	
	<dependency>
		<groupId>org.glassfish</groupId>
		<artifactId>javax.faces</artifactId>
		<version>${mojarra-version}</version>
		 <scope>provided</scope>
	</dependency>
	
	<!-- Maven doesn't compile without it -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
		<version>3.1.0</version>
		<scope>provided</scope>
	</dependency>

	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-validator</artifactId>
		<version>5.2.2.Final</version>
	</dependency>
	
	<!--  Work with Excel -->
	<dependency>
    	<groupId>org.apache.poi</groupId>
        <artifactId>poi</artifactId>
        <version>3.13</version>
    </dependency>
   <dependency>
		<groupId>org.glassfish.main.common</groupId>
		<artifactId>glassfish-api</artifactId>
		<version>${glassfish.version}</version>
		<scope>provided</scope>
    </dependency>

	
<!-- 	<dependency>
    	<groupId>org.glassfish.main.web</groupId>
    	<artifactId>web-core</artifactId>
    	<version>${glassfish.version}</version>
    	<scope>provided</scope>
	</dependency> -->
	
    
    <dependency>
  		<groupId>javax.enterprise</groupId>
  		<artifactId>cdi-api</artifactId>
  		<version>1.2</version>
  		<scope>provided</scope>
  	</dependency>
  	
  	<!-- Test ready application with Selenium -->
	<dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-firefox-driver</artifactId>
        <version>3.0.1</version>
        <scope>test</scope>
	</dependency> 
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
	<dependency>
		<groupId>org.assertj</groupId>
		<artifactId>assertj-core</artifactId>
		<version>3.2.0</version>
		<scope>test</scope>
	</dependency>
	
	<!-- From https://kenai.com/projects/javaee-patterns/sources/hg/content/TestingEJBAndCDI/pom.xml?rev=227 -->
<!-- 	<dependency>
		<groupId>org.glassfish.extras</groupId>
		<artifactId>glassfish-embedded-all</artifactId>
		<version>4.1.1</version>
		<scope>provided</scope>
	</dependency> -->
  	<dependency>
		<groupId>org.dbunit</groupId>
		<artifactId>dbunit</artifactId>
		<version>2.5.1</version>
		<scope>test</scope>
	</dependency>
	<!-- DBUnit needs this otherwise it uses GlassFish's embedded -->
	<dependency>
    	<groupId>org.slf4j</groupId>
    	<artifactId>slf4j-api</artifactId>
    	<version>1.7.13</version>
    	<scope>test</scope>
	</dependency>
  	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>1.7.13</version>
		<scope>test</scope>
  	</dependency>
  	
</dependencies>

 


  <build>
    <finalName>sku-web-sync</finalName>
    
    <sourceDirectory>src/main/java</sourceDirectory>
  
<!--     <resources>
      <resource>
        <directory>src/main/recources</directory>
        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
        <includes>
        <include>SQLQueries.properties</include>
        </includes>
      </resource>
    </resources> -->
    
	<defaultGoal>install</defaultGoal>
	<testResources>
	  <testResource>
	    <directory>${project.basedir}/src/test/java</directory>
	  </testResource>
	  <testResource>
	    <directory>${project.basedir}/src/test/resources</directory>
	  </testResource>
	</testResources>  
		    
 	<plugins>
 		<plugin>
        	<artifactId>maven-compiler-plugin</artifactId>
        	<version>3.3</version>
        	<configuration>
          		<source>1.8</source>
          		<target>1.8</target>
        	</configuration>
      	</plugin>
      	<plugin>
        	<artifactId>maven-war-plugin</artifactId>
        	<version>2.6</version>
        	<configuration>
          		<warSourceDirectory>src/main/webapp</warSourceDirectory>
          		<failOnMissingWebXml>false</failOnMissingWebXml>
				<packagingExcludes>WEB-INF/web.xml</packagingExcludes>
        		<warName>${rp.build.warname}</warName>
	        </configuration>
    	</plugin>
 
		<!-- http://stackoverflow.com/questions/20916581/how-to-do-in-container-testing-of-a-web-app-in-spring -->
		<plugin>
        	<groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.6.0</version>
             	<configuration>
                     <container>
                         <containerId>glassfish4x</containerId>
						      <zipUrlInstaller>
						        <url>http://download.java.net/glassfish/4.1.1/release/glassfish-4.1.1.zip</url>
						      </zipUrlInstaller>
                     </container>
                     <configuration>
                     	<properties>
                             <cargo.servlet.port>8080</cargo.servlet.port>
                             <cargo.protocol>http</cargo.protocol>
<!--                              <cargo.tomcat.httpSecure>false</cargo.tomcat.httpSecure> -->

							<!-- Cleaned domain.xml from datasources -->
                             <cargo.datasource.datasource.ds1>
                             cargo.datasource.url=jdbc:oracle:thin:@dummy.dp.ua:1541:WORK|
                             cargo.datasource.driver=oracle.jdbc.pool.OracleDataSource|
                             cargo.datasource.username=foo|
                             cargo.datasource.password=bar|
                             cargo.datasource.jndi=Oracle
                             <!-- We will use H2 in-memory datasource 
                             It seems, that current version does not support ommitting cargo.datasource.password
                             -->
 <!--                             cargo.datasource.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1|
                             cargo.datasource.driver=org.h2.Driver|
                             cargo.datasource.username=sa|
                             cargo.datasource.jndi=Oracle -->
                             </cargo.datasource.datasource.ds1>
<!--                              cargo.datasource.password=| -->                             
                             <!-- 
							http://stackoverflow.com/questions/10247601/how-to-setup-configuration-jdbc-realm-or-a-java-mail-session-in-glassfish-with
							How to setup configuration (JDBC Realm or a Java Mail Session) in Glassfish with Maven Cargo?
							
							 -->
							                                        
                    	</properties>
						<configfiles>
        					<configfile>
            					<file>${project.build.directory}/filtered-serverresources/domain.xml</file>
            					<todir>cargo-domain/config</todir>
        					</configfile>
        					<configfile>
        						<file>${project.build.directory}/filtered-serverresources/malbi</file>
        						<todir>cargo-domain/config</todir>
        					</configfile>
    					</configfiles>
                	</configuration>

                		<deployables>
                		<deployable>
                		 	<properties>
                		     	<context>${rp.build.warname}</context>
              				</properties>
                		</deployable>
                		</deployables>

                </configuration>
                <executions>
                     <execution>
                        <id>start-container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                        <goal>start</goal>
                    </goals>
                    </execution>
                    	<execution>
                    	<id>stop-container</id>
                    	<phase>post-integration-test</phase>
                    	<goals>
                    		<goal>stop</goal>
                    	</goals>
                	</execution>
            	</executions>
        	</plugin>
        	
        	<plugin>
    			<groupId>org.apache.maven.plugins</groupId>
    			<artifactId>maven-resources-plugin</artifactId>
    			<!-- because maven test-resource does not support filter! -->
    			<version>2.7</version>
    			<configuration>
        			<encoding>UTF-8</encoding>
    			</configuration>
    			<executions>
        			<execution>
            			<id>filter-glassfish-configuration-domain-file</id>
            			<phase>process-test-resources</phase>
            			<goals>
                			<goal>copy-resources</goal>
            			</goals>
            			<configuration>
                			<outputDirectory>${project.build.directory}/filtered-serverresources</outputDirectory>
                			<resources>	
                    			<resource>
                        			<directory>src/test/resources/cargo</directory>
                        			<filtering>true</filtering>
                        			<includes>
                            			<include>**/*.xml</include> <!-- All files, domain and keystore file malbi -->
                            			<include>**/malbi</include>
                        			</includes>
                    			</resource>
                			</resources>
                			<delimiters>
                    			<delimiter>~{*}</delimiter>
                			</delimiters>
            			</configuration>
        		</execution>
    		</executions>
		</plugin>
		
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>	
			<version>2.18.1</version>
			<configuration>
				<includes>
					<include>**/*Tests.java</include>
				</includes>
				<excludes>
            		<exclude>**/*IT.java</exclude>
            	</excludes>
			</configuration>
			<executions>
        	<execution>
            	<phase>integration-test</phase>
            	<goals>
               	<goal>test</goal>
            	</goals>
            	<configuration>
               		<excludes>
                  		<exclude>**/*Tests.java</exclude>
               		</excludes>
            		<includes>
						<include>**/*IT.java</include>
					</includes>
            	</configuration>
        	</execution>
      	</executions>
	</plugin>
 </plugins>   
  </build>
  <profiles>
 	<profile>
        <id>test</id> 
        <properties>
            <rp.build.warname>sku-web-sync-test</rp.build.warname>
        </properties>
    </profile>
    <profile>
        <id>prod</id>
        <properties>
            <rp.build.warname>sku-web-sync</rp.build.warname>
        </properties>
    </profile>
 </profiles> 
</project>
